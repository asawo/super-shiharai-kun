// Code generated by MockGen. DO NOT EDIT.
// Source: db.go

// Package db is a generated GoMock package.
package db

import (
	reflect "reflect"
	time "time"

	model "github.com/asawo/api/db/model"
	errors "github.com/asawo/api/errors"
	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// CreateInvoice mocks base method.
func (m *MockDB) CreateInvoice(tx *gorm.DB, invoice *model.Invoice) errors.ServiceError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvoice", tx, invoice)
	ret0, _ := ret[0].(errors.ServiceError)
	return ret0
}

// CreateInvoice indicates an expected call of CreateInvoice.
func (mr *MockDBMockRecorder) CreateInvoice(tx, invoice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoice", reflect.TypeOf((*MockDB)(nil).CreateInvoice), tx, invoice)
}

// GetUserByEmail mocks base method.
func (m *MockDB) GetUserByEmail(tx *gorm.DB, email string) (*model.User, errors.ServiceError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", tx, email)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(errors.ServiceError)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockDBMockRecorder) GetUserByEmail(tx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockDB)(nil).GetUserByEmail), tx, email)
}

// ListBankAccountsByServiceProviderID mocks base method.
func (m *MockDB) ListBankAccountsByServiceProviderID(tx *gorm.DB, serviceProviderId uint) ([]*model.BankAccount, errors.ServiceError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBankAccountsByServiceProviderID", tx, serviceProviderId)
	ret0, _ := ret[0].([]*model.BankAccount)
	ret1, _ := ret[1].(errors.ServiceError)
	return ret0, ret1
}

// ListBankAccountsByServiceProviderID indicates an expected call of ListBankAccountsByServiceProviderID.
func (mr *MockDBMockRecorder) ListBankAccountsByServiceProviderID(tx, serviceProviderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBankAccountsByServiceProviderID", reflect.TypeOf((*MockDB)(nil).ListBankAccountsByServiceProviderID), tx, serviceProviderId)
}

// ListInvoices mocks base method.
func (m *MockDB) ListInvoices(tx *gorm.DB, companyId uint, start, time time.Time) ([]*model.Invoice, errors.ServiceError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvoices", tx, companyId, start, time)
	ret0, _ := ret[0].([]*model.Invoice)
	ret1, _ := ret[1].(errors.ServiceError)
	return ret0, ret1
}

// ListInvoices indicates an expected call of ListInvoices.
func (mr *MockDBMockRecorder) ListInvoices(tx, companyId, start, time interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvoices", reflect.TypeOf((*MockDB)(nil).ListInvoices), tx, companyId, start, time)
}

// ListServiceProvidersByCompanyID mocks base method.
func (m *MockDB) ListServiceProvidersByCompanyID(tx *gorm.DB, companyId uint) ([]*model.ServiceProvider, errors.ServiceError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceProvidersByCompanyID", tx, companyId)
	ret0, _ := ret[0].([]*model.ServiceProvider)
	ret1, _ := ret[1].(errors.ServiceError)
	return ret0, ret1
}

// ListServiceProvidersByCompanyID indicates an expected call of ListServiceProvidersByCompanyID.
func (mr *MockDBMockRecorder) ListServiceProvidersByCompanyID(tx, companyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceProvidersByCompanyID", reflect.TypeOf((*MockDB)(nil).ListServiceProvidersByCompanyID), tx, companyId)
}

// StartTransaction mocks base method.
func (m *MockDB) StartTransaction(fn func(*gorm.DB) error) errors.ServiceError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTransaction", fn)
	ret0, _ := ret[0].(errors.ServiceError)
	return ret0
}

// StartTransaction indicates an expected call of StartTransaction.
func (mr *MockDBMockRecorder) StartTransaction(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransaction", reflect.TypeOf((*MockDB)(nil).StartTransaction), fn)
}
